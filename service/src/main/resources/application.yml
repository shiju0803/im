spring:
  profiles:
    active: dev
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://106.52.219.98:3306/im?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    username: root
    password: shiju1283
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      auto-commit: true
      connection-test-query: SELECT 1
      connection-timeout: 60000
      idle-timeout: 60000 #连接空闲时间需要比最大生命周期时间短一些
      max-lifetime: 60000 #连接最大生命周期需要比MYSQL连接空闲时间10分钟短一些
      maximum-pool-size: 60
      minimum-idle: 10
      pool-name: im_HikariCP
      validation-timeout: 3000
      login-timeout: 5
      read-only: false

  redis:
    cluster:
      nodes: 106.52.219.98:7361,106.52.219.98:7362,106.52.219.98:7363,106.52.219.98:7364,106.52.219.98:7365,106.52.219.98:7366
      max-redirects: 3
    password: shiju1283
    timeout: 5000
    lettuce:
      pool:
        max-active: 50  # 允许最大连接数，默认8（负值表示没有限制）
        max-idle: 10     # 最大空闲连接数，默认8
        min-idle: 5     # 最小空闲连接数，默认0
        max-wait: -1  # 连接用完时，新的请求等待时间(s秒、ms毫秒)，超过该时间抛出异常JedisConnectionException，(默认-1，负值表示没有限制)
      shutdown-timeout: 100ms

  rabbitmq:
    host: 106.52.219.98
    port: 5672
    virtual-host: /
    username: shiju1283
    password: shiju1283
    connection-timeout: 2000
    publisher-returns: true
    listener:
      simple:
        concurrency: 5
        max-concurrency: 10
        acknowledge-mode: MANUAL
        prefetch: 1
    template:
      mandatory: true
    cache:
      connection:
        mode: CHANNEL
      channel:
        size: 36
        checkout-timeout: 0

  application:
    name: im-core
  mvc:
    path match:
      matching-strategy: ANT_PATH_MATCHER
  main:
    allow-circular-references: true
  debug: dev

# 应用配置
appConfig:
  secretKey: ShiJu
  zkAddr: 106.52.219.98:2181,106.52.219.98:2182,106.52.219.98:2183 # zk连接地址
  zkConnectTimeOut: 40000 # zk超时时间
  imRouteWay: 3 # 路由策略 1随机 2轮循 3一致性hash
  consistentHashWay: 1 # 如果选用一致性hash的话具体hash算法 1 TreeMap 2 自定义Map
  callbackUrl: http://127.0.0.1:8000/im/v1/callback
  sendMessageCheckFriend: true # 发送消息是否校验关系链
  sendMessageCheckBlack: true # 发送消息是否校验黑名单
  modifyUserAfterCallback: true # 用户资料变更之后回调开关
  addFriendAfterCallback: true # 添加好友之后回调开关
  addFriendBeforeCallback: true # 添加好友之前回调开关
  modifyFriendAfterCallback: true # 修改好友之后回调开关
  deleteFriendAfterCallback: true # 删除好友之后回调开关
  addFriendShipBlackAfterCallback: true #添加黑名单之后回调开关
  deleteFriendShipBlackAfterCallback: true #删除黑名单之后回调开关
  createGroupAfterCallback: true # 创建群聊之后回调开关
  modifyGroupAfterCallback: true # 修改群聊之后回调开关
  destroyGroupAfterCallback: true # 解散群聊之后回调开关
  deleteGroupMemberAfterCallback: true # 删除群成员之后回调
  addGroupMemberAfterCallback: true # 拉人入群之后回调
  addGroupMemberBeforeCallback: true # 拉人入群之前回调
  sendMessageAfterCallback: true # 发送单聊消息之后
  sendMessageBeforeCallback: true # 发送单聊消息之前
  sendGroupMessageAfterCallback: true # 发送群聊消息之后
  sendGroupMessageBeforeCallback: true # 发送群聊消息之前
  offlineMessageCount: 1000 # 离线消息存储条数
  deleteConversationSyncMode: 1 # 1多端同步

# logger配置
logging:
  config: classpath:logback-spring.xml
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) - %clr([%t]){faint} %X{traceId} %clr(%logger{39}){cyan} %clr(:){faint} %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} %5p - [%t] %X{traceId} %logger{39} : %m%n%wEx"

server:
  port: 8000
  servlet:
    context-path: /im

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath*:mapper/*.xml
  global-config:
    db-config:
      update-strategy: NOT_EMPTY

# httpclient配置
httpclient:
  maxTotal: 100
  defaultMaxPerRoute: 50
  connectTimeout: 2000
  connectionRequestTimeout: 2000
  socketTimeout: 5000
  staleConnectionCheckEnabled: true

# mybatisplus-plus对mybatisplus的一些功能补充
mpp:
  entityBasePath: com.sj.im.service.conversation.entry,com.sj.im.service.friendship.entry,com.sj.im.service.group.entry,com.sj.im.service.message.entry,com.sj.im.service.user.entry

